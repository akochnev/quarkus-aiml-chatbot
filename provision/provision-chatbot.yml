---
- hosts: localhost
  vars_files:
    - ./vars/chatbot.yml
  name : test out k8s setup
  vars:    
    # Note - this value is included in the chatbot and processor configuration, 
    # so it's not easily changeable - used to locate the kafka bootstrap
    amq_project: amq-streams1
        

  tasks:
    # - name: create openshift admin / user secrets
    #   shell:  
    #     cmd: "{{ oc_cli }} create secret generic ak-htpasswd-secret -n openshift-config --from-file=htpasswd={{ oc_users_file }}"
    - name: create openshift admin/users secret
      k8s:
        kubeconfig: '{{ kubeconfig }}'
        state: present
        src: ./files/ak-htpasswd-secret.yml

    # This needs to run only the first time - ugh !     
    - name: add ak-htpasswd-secret to oauth config 
      shell: |
        {{oc_cli}} patch oauth cluster --type=json -p='[
        { "op":"add",
        "path":"/spec/identityProviders/-",
        "value": {
          "name":"ak-htpasswd",
          "mappingMethod":"claim",
          "type":"HTPasswd",
          "htpasswd": {
            "fileData": {
              "name": "ak-htpasswd-secret" 
            } 
          }
        } 
        }]'
      when: first_run | bool
   

    - name: make akadmin a cluster admin
      k8s: 
        kubeconfig: '{{ kubeconfig }}'
        state: present
        src: ./files/akadmin-admin-rb.yml

    - name: Generate projects per-user
      k8s:
        kubeconfig: '{{ kubeconfig }}'
        definition: '{{ lookup("template", "./files/project.yml.j2")|from_yaml }}'
      with_items: 
        - { name: '{{ dev_project }}', user: '{{dev_user}}'}
        - { name: '{{ odh_project }}', user: '{{dev_user}}'}
        - { name: '{{ amq_project }}', user: '{{dev_user}}'}
        - { name: 'knative-serving', user: '{{dev_user}}'}
        - { name: 'knative-eventing', user: '{{dev_user}}'}

    - name: add seldon CRD
      k8s:
        kubeconfig: '{{ kubeconfig }}'    
        definition: '{{ lookup("template", "./files/seldon-deployment-crd.yml")|from_yaml }}'
      
    - name: install open data hub operator
      k8s:
        kubeconfig: '{{ kubeconfig }}'
        definition: '{{ lookup("template", "./files/opendatahub-operator.yml.j2")|from_yaml }}'
      vars:
        project_name: '{{ odh_project }}'

    # there probably is a better way to do this    
    - name: wait for open data hub operator to finish setting up
      pause:
        seconds: 20  

    - name: deploy open data hub instance
      k8s:
        kubeconfig: '{{ kubeconfig }}'
        definition: '{{ lookup("template", "./files/opendatahub-instance.yml.j2")|from_yaml }}'
      vars:
        project_name: '{{ odh_project }}'    
    
      
    - name: subscribe to amq streams operator
      k8s: 
        kubeconfig: '{{ kubeconfig}}'
        definition: '{{ lookup("template", "./files/amqstreams-subscription.yml.j2")|from_yaml }}'
      vars:
        project_name: '{{ amq_project }}'

    - name: wait for amq streams operator to finish setting up
      pause:
        seconds: 30    

    - name: Create kafka instance
      k8s: 
        kubeconfig: '{{ kubeconfig}}'
        definition: '{{ lookup("template", "./files/amqstreams-instance.yml.j2")|from_yaml }}'
      vars:
        project_name: '{{ amq_project }}'

    - name: create https route for chatbot
      k8s:
        kubeconfig: '{{ kubeconfig }}'
        definition:
          apiVersion: route.openshift.io/v1
          kind: Route
          metadata:
            labels:
              app.kubernetes.io/name: hackfest-chatbot
              app.kubernetes.io/version: 1.0.0-SNAPSHOT
              app.openshift.io/runtime: quarkus
            name: chatbot-https
            namespace: '{{ dev_project }}'
          spec:            
            port:
              targetPort: http
            tls:
              insecureEdgeTerminationPolicy: Redirect
              termination: edge
            to:
              kind: Service
              name: hackfest-chatbot
              weight: 100
            wildcardPolicy: None


    - name: create serverless operator subscriptions
      block:
      - name: subscribe to serverless - serving operators
        k8s: 
          kubeconfig: '{{ kubeconfig }}'
          definition: 
            apiVersion: operators.coreos.com/v1alpha1
            kind: Subscription
            metadata:
              name: serverless-operator
              namespace: openshift-operators
            spec:
              channel: preview-4.3
              installPlanApproval: Automatic
              name: serverless-operator
              source: redhat-operators
              sourceNamespace: openshift-marketplace
        
      - name: wait for serverless operator subscriptions
        pause:
          seconds: 45       

      - name: subscribe to serverless - eventing operator
        k8s: 
          kubeconfig: '{{ kubeconfig}}'
          definition: 
            apiVersion: operators.coreos.com/v1alpha1
            kind: Subscription
            metadata:
              name: knative-eventing-operator
              namespace: openshift-operators
            spec:
              channel: alpha
              installPlanApproval: Automatic
              name: knative-eventing-operator
              source: community-operators
              sourceNamespace: openshift-marketplace
              targetNamespace: knative-eventing
      - name: wait for eventing operator subscriptions
        pause:
          seconds: 45 

      - name: subscribe to  kafka-knative operator
        k8s: 
          kubeconfig: '{{ kubeconfig}}'
          definition: 
            apiVersion: operators.coreos.com/v1alpha1
            kind: Subscription
            metadata:
              name: knative-kafka-operator
              namespace: openshift-operators
            spec:
              channel: alpha
              installPlanApproval: Automatic
              name: knative-kafka-operator
              source: community-operators
              sourceNamespace: openshift-marketplace  

      - name: wait for knative kafka operator subscriptions
        pause:
          seconds: 20 


    - name: create serving and eventing instances
      k8s: 
        kubeconfig: '{{ kubeconfig}}'
        definition: '{{ lookup("template", "./files/serverless-instances.yml.j2")|from_yaml }}'  
      vars:
        project_name: '{{ amq_project }}'

    - name: build and deploy chatbot service
      shell: 
        chdir: '{{ hackfest_src_dir }}/chatbot'
        cmd: | 
          {{oc_cli}} project {{ dev_project }}

          ./mvnw clean package -DskipTests=true -Dquarkus.kubernetes.deploy=true
      when: build_chatbot | bool


    # pushing to quay and deploying from there is a workaround to failing to build
    - name: build and deploy processor 
      block:
      - name: build and tag processor image
        shell:
          chdir: '{{ hackfest_src_dir }}/sentiment-processor'
          cmd: |
            ./mvnw clean package -DskipTests=true -Pnative 
            
            {{podman_cli}} build -f src/main/docker/Dockerfile.native -t sentiment-processor:{{quay_tag}} .

            {{podman_cli}} tag sentiment-processor:{{quay_tag}}  {{quay_registry_ns}}/sentiment-processor:{{quay_tag}} 
            
            {{podman_cli}} push {{quay_registry_ns}}/sentiment-processor:{{quay_tag}}                    

      - name: deploy processor knative service 
        k8s: 
          kubeconfig: '{{ kubeconfig }}'    
          definition:
            apiVersion: serving.knative.dev/v1
            kind: Service
            metadata:
              name: sentiment-processor
              namespace: '{{ dev_project }}'
            spec:
              template:
                metadata:
                  name: sentiment-processor-{{quay_tag}}
                spec:
                  containers:
                    - image: "{{quay_registry_ns}}/sentiment-processor:{{quay_tag}}"

      - name: Add kafka source
        k8s: 
          kubeconfig: '{{ kubeconfig }}'
          definition: '{{ lookup("template", "./files/kafka-source.yml.j2")|from_yaml }}'  
        vars:
          project_name: '{{ dev_project }}'     
      when: build_processor | bool
      vars:
        quay_tag: '{{processor_version}}'


