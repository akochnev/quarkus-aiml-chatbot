quarkus.openshift.expose=true
quarkus.kubernetes.deployment-target=openshift
quarkus.kubernetes-client.trust-certs=true

quarkus.kafka-streams.application-id=hackfest1-dev
quarkus.kafka-streams.topics=messages,emojis,gifs

# Configure the Kafka sink (we write to it)
# Outgoing stream

# match the server to the service that you've deployed in kafka - e.g. "cluster-name-kafka-bootstrap"
mp.messaging.outgoing.chat-messages.bootstrap.servers=dev-cluster-kafka-bootstrap.amq-streams1.svc.cluster.local:9092
mp.messaging.outgoing.chat-messages.connector=smallrye-kafka
mp.messaging.outgoing.chat-messages.topic=messages
mp.messaging.outgoing.chat-messages.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.chat-messages.key.serializer=org.apache.kafka.common.serialization.StringSerializer

mp.messaging.incoming.chat-sentiment-scores.connector=smallrye-kafka
mp.messaging.incoming.chat-sentiment-scores.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.chat-sentiment-scores.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.chat-sentiment-scores.bootstrap.servers=dev-cluster-kafka-bootstrap.amq-streams1.svc.cluster.local:9092
mp.messaging.incoming.chat-sentiment-scores.id=chat-sentiment-scores
mp.messaging.incoming.chat-sentiment-scores.auto.offset.reset=earliest
mp.messaging.incoming.chat-sentiment-scores.enable.auto.commit=true
mp.messaging.incoming.chat-sentiment-scores.request.timeout.ms=30000


#Configure the name of the resource from which to read the google creds
hackfest.chatbot.googleCredsResource=/ak-quarkus-hackfest1-apikey.json


