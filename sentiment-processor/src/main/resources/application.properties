quarkus.openshift.expose=true
quarkus.kubernetes.deployment-target=openshift
quarkus.kubernetes-client.trust-certs=true

mp.messaging.outgoing.chat-sentiment-scores-results.bootstrap.servers=dev-cluster-kafka-bootstrap.amq-streams1.svc.cluster.local:9092
mp.messaging.outgoing.chat-sentiment-scores-results.connector=smallrye-kafka
mp.messaging.outgoing.chat-sentiment-scores-results.topic=chat-sentiment-scores
mp.messaging.outgoing.chat-sentiment-scores-results.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.chat-sentiment-scores-results.key.serializer=org.apache.kafka.common.serialization.StringSerializer

# Incoming stream (unneeded when using Knative events)
mp.messaging.incoming.messages.connector=smallrye-kafka
mp.messaging.incoming.messages.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.messages.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.messages.bootstrap.servers=dev-cluster-kafka-bootstrap.amq-streams1.svc.cluster.local:9092
mp.messaging.incoming.messages.id=chat-messages
mp.messaging.incoming.messages.auto.offset.reset=earliest
mp.messaging.incoming.messages.enable.auto.commit=true
mp.messaging.incoming.messages.request.timeout.ms=30000

#Configure the microprofile rest client for the sentiment analyzer
quarkus.hackfest.sentiment.SentimentRestClient/mp-rest/url=http://sentiment-analysis-opendatahub1.apps.cluster-nisky-a9fb.nisky-a9fb.example.opentlc.com
quarkus.hackfest.sentiment.SentimentRestClient/mp-rest/scope=javax.inject.Singleton 
